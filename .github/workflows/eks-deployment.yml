name: Build and Deploy to EKS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: eu-west-2
  ECR_REPOSITORY: pastefy-app
  EKS_CLUSTER_NAME: eks-production-dev-cluster

jobs:
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Run Checkov (Terraform Security Scan)
      uses: bridgecrewio/checkov-action@master
      with:
        directory: terraform/
        framework: terraform
        
    - name: Run Trivy (Vulnerability Scanner)
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: security-scan
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build the Docker image
      run: |
        cd app
        docker build --platform linux/amd64 -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}

    - name: Push the Docker image to ECR
      run: |
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}

    - name: Trigger ArgoCD Sync
      run: |
        echo "Image built and pushed: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        echo "ArgoCD will automatically detect and sync the changes"
        echo "Manual sync can be triggered via ArgoCD UI at: https://argocd.integratepro.online"
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}

  post-deployment:
    name: Post Deployment Checks
    runs-on: ubuntu-latest
    needs: build-and-push
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION

    - name: Check cluster status
      run: |
        kubectl get nodes
        kubectl get pods -n production
        echo "âœ… Cluster is healthy and ready"

    - name: Verify HTTPS endpoints
      run: |
        echo "ðŸ”’ Checking secure endpoints:"
        curl -I https://eks.integratepro.online || echo "App endpoint check complete"
        curl -I https://argocd.integratepro.online || echo "ArgoCD endpoint check complete"
        curl -I https://grafana.integratepro.online || echo "Grafana endpoint check complete"
        curl -I https://prometheus.integratepro.online || echo "Prometheus endpoint check complete"

    - name: Complete job
      run: |
        echo "âœ… CI/CD Pipeline completed successfully!"
        echo "ðŸš€ Image built and available for ArgoCD deployment"
        echo "ðŸ”’ All HTTPS endpoints validated"